variables:
  - template: pipeline-variables.yml

trigger:
  branches:
    include:
      - master

pr:
  branches:
    include:
      - "master"
      - "feature/*"
      - "hotfix/*"
      - "bugfix/*"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Build
    jobs:
      - job: build_backend
        displayName: "Build web api"
        steps:
          - checkout: self
            submodules: recursive

          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              version: "8.0.x"

          - task: DotNetCoreCLI@2
            displayName: "Run .NET Unit Tests"
            inputs:
              command: "test"
              projects: "src/AiTrainer.Web/AiTrainer.Web.sln"
              arguments: "-c Release"

          - task: FileTransform@2
            displayName: "Transform app settings"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/AiTrainer.Web/AiTrainer.Web.Api"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "appsettings.json"

          - task: Docker@2
            displayName: build local docker image
            inputs:
              command: build
              Dockerfile: "$(Build.SourcesDirectory)/src/AiTrainer.Web/dockerfile"
              buildContext: "$(Build.SourcesDirectory)"

      - job: build_core_api
        displayName: "Build core api"
        variables:
          - name: version
            value: $(Build.BuildNumber)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: 22.x

          - powershell: $(Build.SourcesDirectory)/build-scripts/create_express_app_settings_json.ps1
            displayName: "Add express app settings environment"

          - task: FileTransform@2
            displayName: "Transform express app settings"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/AiTrainer.Core/src/Data"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "expressappsettings.json"

          - task: FileTransform@2
            displayName: "Transform package json"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/AiTrainer.Core"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "package.json"

          - task: Npm@1
            displayName: "NPM install"
            inputs:
              command: "custom"
              customCommand: "ci"
              workingDir: $(Build.SourcesDirectory)/src/AiTrainer.Core

          - task: Npm@1
            displayName: "Check types"
            inputs:
              commands: "custom"
              customCommand: "run check-types"
              workingDir: $(Build.SourcesDirectory)/src/AiTrainer.Core

          - task: Npm@1
            displayName: "Test"
            inputs:
              command: "custom"
              customCommand: "test --watchAll=false --coverage --ci"
              workingDir: $(Build.SourcesDirectory)/src/AiTrainer.Core

          - task: Npm@1
            displayName: "Build"
            inputs:
              command: "custom"
              customCommand: "run build"
              workingDir: $(Build.SourcesDirectory)/src/AiTrainer.Core

      - job: build_frontend
        displayName: "Build frontend"
        variables:
          - name: version
            value: $(Build.BuildNumber)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: 22.x

          - powershell: $(Build.SourcesDirectory)/build-scripts/create_react_app_settings_json.ps1
            displayName: "Add react app settings environment"

          - task: FileTransform@2
            displayName: "Transform react app settings"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/aitrainer-test-client/src/Data"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "reactappsettings.json"

          - task: FileTransform@2
            displayName: "Transform package json"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/aitrainer-test-client"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "package.json"

          - task: Npm@1
            displayName: "NPM install"
            inputs:
              command: "custom"
              customCommand: "ci"
              workingDir: $(Build.SourcesDirectory)/src/aitrainer-test-client

          - task: Npm@1
            displayName: "Check types"
            inputs:
              commands: "custom"
              customCommand: "run check-types"
              workingDir: $(Build.SourcesDirectory)/src/aitrainer-test-client

          # - task: Npm@1
          #   displayName: "Test"
          #   inputs:
          #     command: "custom"
          #     customCommand: "test --watchAll=false --coverage --ci"
          #     workingDir: $(Build.SourcesDirectory)/src/aitrainer-test-client

          # - task: Npm@1
          #   displayName: "Build"
          #   inputs:
          #     command: "custom"
          #     customCommand: "run build"
          #     workingDir: $(Build.SourcesDirectory)/src/aitrainer-test-client

          # - publish: "$(Build.SourcesDirectory)/src/aitrainer-test-client/build"
          #   condition: eq(variables.isMain, true)
          #   displayName: "Publish frontend build files"
          #   artifact: chrome-ext

  - stage: Publish
    condition: eq(variables.isMain, true)
    jobs:
      - job: login_to_dockerhub
        displayName: Login to dockerhub
        steps:

          - task: Docker@2
            displayName: Login to Docker Hub
            inputs:
              command: login
              containerRegistry: DockerHub
              username: $(pipeline.dockerHubUsername)
              password: $(pipeline.dockerHubPassword)

      - job: push_web_image
        displayName: Push web image
        dependsOn: login_to_dockerhub
        condition: succeeded() 
        steps:
          - checkout: self
            submodules: recursive

          - task: Docker@2
            displayName: Build Web Image
            inputs:
              command: build
              repository: $(pipeline.web-api-docker-repository)
              tags: |
                latest
                $(Build.BuildNumber)
              Dockerfile: "$(Build.SourcesDirectory)/src/AiTrainer.Web/dockerfile"
              buildContext: "$(Build.SourcesDirectory)"

          - task: Docker@2
            displayName: Push Web Image
            inputs:
              command: push
              repository: $(pipeline.web-api-docker-repository)
              tags: |
                latest
                $(Build.BuildNumber)

      - job: push_core_image
        displayName: Push core image
        dependsOn: login_to_dockerhub
        condition: succeeded()
        steps:
          - checkout: self
            submodules: recursive


          - task: Docker@2
            displayName: Build Core Image
            inputs:
              command: build
              repository: $(pipeline.core-api-docker-repository)
              tags: |
                latest
                $(Build.BuildNumber)
              Dockerfile: "$(Build.SourcesDirectory)/src/AiTrainer.Core/dockerfile"
              buildContext: "$(Build.SourcesDirectory)"

          - task: Docker@2
            displayName: Push Core Image
            inputs:
              command: push
              repository: $(pipeline.core-api-docker-repository)
              tags: |
                latest
                $(Build.BuildNumber)
