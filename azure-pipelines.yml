variables:
  - template: pipeline-variables.yml

trigger:
  branches:
    include:
      - master

pr:
  branches:
    include:
      - "master"
      - "feature/*"
      - "hotfix/*"
      - "bugfix/*"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Build
    jobs:
      - job: build_backend
        displayName: "Build web api"
        steps:
          - checkout: self
            submodules: recursive

          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              version: "8.0.x"

          - task: DotNetCoreCLI@2
            displayName: "Run .NET Unit Tests"
            inputs:
              command: "test"
              projects: "src/AiTrainer.Web/AiTrainer.Web.sln"
              arguments: "-c Release"

          - task: FileTransform@2
            displayName: "Transform app settings"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/AiTrainer.Web/AiTrainer.Web.Api"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "appsettings.json"

          - task: Docker@2
            displayName: build local docker image
            inputs:
              command: build
              Dockerfile: "$(Build.SourcesDirectory)/src/AiTrainer.Web/dockerfile"
              buildContext: "$(Build.SourcesDirectory)"

      - job: build_core_api
        displayName: "Build core api"
        variables:
          - name: version
            value: $(Build.BuildNumber)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: 22.x

          - task: FileTransform@2
            displayName: "Transform express app settings"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/AiTrainer.Core/src/Data"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "expressappsettings.json"

          - task: FileTransform@2
            displayName: "Transform package json"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/AiTrainer.Core"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "package.json"

          - task: Npm@1
            displayName: "NPM install"
            inputs:
              command: "custom"
              customCommand: "ci"
              workingDir: $(Build.SourcesDirectory)/src/AiTrainer.Core

          - task: Npm@1
            displayName: "Check types"
            inputs:
              commands: "custom"
              customCommand: "run check-types"
              workingDir: $(Build.SourcesDirectory)/src/AiTrainer.Core

          # - task: Npm@1
          #   displayName: "Test"
          #   inputs:
          #     command: "custom"
          #     customCommand: "test --watchAll=false --coverage --ci"
          #     workingDir: $(Build.SourcesDirectory)/src/AiTrainer.Core

          - task: Npm@1
            displayName: "Build"
            inputs:
              command: "custom"
              customCommand: "run build"
              workingDir: $(Build.SourcesDirectory)/src/AiTrainer.Core

          - publish: "$(Build.SourcesDirectory)/src/AiTrainer.Core/build"
            condition: eq(variables.isMain, true)
            displayName: "Publish core api files"
            artifact: core-api

      - job: build_chrome_extension
        displayName: "Build chrome extension"
        variables:
          - name: version
            value: $(Build.BuildNumber)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: 22.x

          - task: FileTransform@2
            displayName: "Transform react app settings"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/aitrainer-chrome-ext/src/Data"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "reactappsettings.json"

          - task: FileTransform@2
            displayName: "Transform package json"
            inputs:
              folderPath: "$(Build.SourcesDirectory)/src/aitrainer-chrome-ext"
              fileType: "json"
              xmlTransformationRules:
              jsonTargetFiles: "package.json"

          - task: Npm@1
            displayName: "NPM install"
            inputs:
              command: "custom"
              customCommand: "ci"
              workingDir: $(Build.SourcesDirectory)/src/aitrainer-chrome-ext

          - task: Npm@1
            displayName: "Check types"
            inputs:
              commands: "custom"
              customCommand: "run check-types"
              workingDir: $(Build.SourcesDirectory)/src/aitrainer-chrome-ext

          # - task: Npm@1
          #   displayName: "Test"
          #   inputs:
          #     command: "custom"
          #     customCommand: "test --watchAll=false --coverage --ci"
          #     workingDir: $(Build.SourcesDirectory)/src/aitrainer-chrome-ext

          - task: Npm@1
            displayName: "Build"
            inputs:
              command: "custom"
              customCommand: "run build"
              workingDir: $(Build.SourcesDirectory)/src/aitrainer-chrome-ext

          - publish: "$(Build.SourcesDirectory)/src/aitrainer-chrome-ext/build"
            condition: eq(variables.isMain, true)
            displayName: "Publish chrome extension files"
            artifact: chrome-ext

  # - stage: Publish
  #   condition: eq(variables.isMain, true)
  #   jobs:
  #     - job: push_core_image
  #       steps:
  #         - checkout: self
  #           submodules: recursive
  #         - task: DownloadPipelineArtifact@2
  #           inputs:
  #             artifact: client
  #             path: $(Build.SourcesDirectory)/src/client/build

  #         - task: Docker@2
  #           displayName: Login to Docker Hub
  #           inputs:
  #             command: login
  #             containerRegistry: DockerHub
  #             username: $(dockerHubUsername)
  #             password: $(dockerHubPassword)

  #         - task: Docker@2
  #           displayName: Build Core Image
  #           inputs:
  #             command: build
  #             repository: $(core-dockerRepository)
  #             tags: |
  #               latest
  #               $(Build.BuildNumber)
  #             Dockerfile: "$(Build.SourcesDirectory)/src/fsCore/dockerfile"
  #             buildContext: "$(Build.SourcesDirectory)"
  #             arguments: --build-arg WEB_APP_CLIENT_PATH=src/client/build/

  #         - task: Docker@2
  #           displayName: Push Core Image
  #           inputs:
  #             command: push
  #             repository: $(core-dockerRepository)
  #             tags: |
  #               latest
  #               $(Build.BuildNumber)
